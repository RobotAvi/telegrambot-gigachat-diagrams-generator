#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞ –±–µ–∑ Telegram
"""

import asyncio
import os
from gigachat_client import gigachat_client
from diagram_generator import diagram_generator


async def test_gigachat_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat"""
    print("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat...")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á GigaChat: ").strip()
    
    try:
        gigachat_client.set_credentials(api_key)
        is_valid = await gigachat_client.check_credentials()
        
        if is_valid:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


async def test_diagram_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    print("\nüìä –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã...")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    request = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...")
        code = await gigachat_client.generate_diagram_code(request)
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n{code}\n")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã...")
        diagram_path = await diagram_generator.generate_diagram(code, 12345)
        
        if diagram_path and os.path.exists(diagram_path):
            print(f"‚úÖ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {diagram_path}")
            print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(diagram_path)} –±–∞–π—Ç")
            return True
        else:
            print("‚ùå –î–∏–∞–≥—Ä–∞–º–º–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Diagram Generator Bot")
    print("====================================")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat
    gigachat_ok = await test_gigachat_connection()
    
    if not gigachat_ok:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ - –ø—Ä–æ–±–ª–µ–º—ã —Å GigaChat")
        return
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
    diagram_ok = await test_diagram_generation()
    
    # –ò—Ç–æ–≥–∏
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"GigaChat –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if gigachat_ok else '‚ùå'}")
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º: {'‚úÖ' if diagram_ok else '‚ùå'}")
    
    if gigachat_ok and diagram_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


if __name__ == "__main__":
    asyncio.run(main())