#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ API –∫–ª—é—á–µ–π
"""

import asyncio
import tempfile
import os
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        import aiogram
        print("‚úÖ aiogram –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        import aiohttp
        print("‚úÖ aiohttp –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        import diagrams
        print("‚úÖ diagrams –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
        import config
        print("‚úÖ config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        import gigachat_client
        print("‚úÖ gigachat_client –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        import diagram_generator
        print("‚úÖ diagram_generator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_diagrams_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ diagrams"""
    print("\nüìä –¢–µ—Å—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ diagrams...")
    
    try:
        from diagrams import Diagram
        from diagrams.aws.compute import EC2
        from diagrams.aws.network import ELB
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            old_cwd = os.getcwd()
            os.chdir(temp_dir)
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                with Diagram("Test Diagram", show=False, filename="test"):
                    lb = ELB("Load Balancer")
                    web = EC2("Web Server")
                    lb >> web
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
                if os.path.exists("test.png"):
                    print("‚úÖ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    file_size = os.path.getsize("test.png")
                    print(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    return True
                else:
                    print("‚ùå –§–∞–π–ª –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    return False
                    
            finally:
                os.chdir(old_cwd)
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        return False


def test_diagram_generator():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∏–∞–≥—Ä–∞–º–º"""
    print("\nüî® –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∏–∞–≥—Ä–∞–º–º...")
    
    try:
        from diagram_generator import DiagramGenerator
        
        generator = DiagramGenerator()
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞
        valid_code = '''
from diagrams import Diagram
from diagrams.aws.compute import EC2

with Diagram("Test", show=False, filename="output"):
    ec2 = EC2("Instance")
'''
        
        invalid_code = '''
import os
os.system("rm -rf /")
'''
        
        if generator._validate_code(valid_code):
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ—à–ª–∞")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ –ø—Ä–æ—à–ª–∞")
            return False
            
        if not generator._validate_code(invalid_code):
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return False
            
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∏–∞–≥—Ä–∞–º–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


def test_gigachat_client():
    """–¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ GigaChat"""
    print("\nü§ñ –¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ GigaChat...")
    
    try:
        from gigachat_client import GigaChatClient
        
        client = GigaChatClient()
        
        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        client.set_credentials("test_secret")
        
        if client.client_secret == "test_secret":
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        import config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        assert hasattr(config, 'GIGACHAT_BASE_URL')
        assert hasattr(config, 'GIGACHAT_AUTH_URL')
        assert hasattr(config, 'GIGACHAT_SYSTEM_PROMPT')
        assert hasattr(config, 'MAX_CODE_LENGTH')
        assert hasattr(config, 'TEMP_DIR')
        assert hasattr(config, 'DIAGRAMS_DIR')
        
        print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(config.GIGACHAT_SYSTEM_PROMPT)} —Å–∏–º–≤–æ–ª–æ–≤")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Diagram Generator Bot")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_config,
        test_gigachat_client,
        test_diagram_generator,
        test_diagrams_basic,
    ]
    
    results = []
    
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather")
        print("2. –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        print("4. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á GigaChat –∏ –≤–≤–µ–¥–∏—Ç–µ –≤ –±–æ—Ç–µ")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    return passed == total


if __name__ == "__main__":
    asyncio.run(main())