import os
import asyncio
from typing import List, Dict, Optional
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from dotenv import load_dotenv
import json

load_dotenv()

class TelegramService:
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.bot = None
        self.application = None
        
        if self.token:
            self.bot = Bot(token=self.token)
            self.application = Application.builder().token(self.token).build()
            self._setup_handlers()
    
    def _setup_handlers(self):
        """Setup Telegram bot handlers."""
        if not self.application:
            return
            
        # Command handlers
        self.application.add_handler(CommandHandler("start", self._start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("status", self._status_command))
        
        # Callback query handler for job selections
        self.application.add_handler(CallbackQueryHandler(self._handle_job_selection))
    
    async def send_job_notifications(self, chat_id: str, jobs: List[Dict], user_id: int) -> bool:
        """Send job notifications to user with selection buttons."""
        if not self.bot:
            print("Telegram bot not configured")
            return False
        
        try:
            if not jobs:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="üîç –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
                return True
            
            message = f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n"
            
            for i, job in enumerate(jobs[:10], 1):  # Limit to 10 jobs
                salary_info = ""
                if job.get("salary_min") or job.get("salary_max"):
                    salary_parts = []
                    if job.get("salary_min"):
                        salary_parts.append(f"–æ—Ç {job['salary_min']:,}")
                    if job.get("salary_max"):
                        salary_parts.append(f"–¥–æ {job['salary_max']:,}")
                    salary_info = f" ({' '.join(salary_parts)} {job.get('salary_currency', 'RUB')})"
                
                message += f"{i}. **{job['title']}**\n"
                message += f"üè¢ {job['company']}\n"
                if job.get('location'):
                    message += f"üìç {job['location']}\n"
                message += f"üí∞ {salary_info}\n"
                message += f"üîó [–°—Å—ã–ª–∫–∞]({job['external_url']})\n\n"
            
            # Create inline keyboard for job selection
            keyboard = []
            for i, job in enumerate(jobs[:10]):
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úÖ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ {i+1}",
                        callback_data=f"apply_{user_id}_{job['external_id']}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data=f"skip_all_{user_id}")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            return True
            
        except Exception as e:
            print(f"Error sending Telegram notification: {e}")
            return False
    
    async def send_simple_notification(self, chat_id: str, message: str) -> bool:
        """Send a simple text notification."""
        if not self.bot:
            return False
        
        try:
            await self.bot.send_message(chat_id=chat_id, text=message)
            return True
        except Exception as e:
            print(f"Error sending Telegram message: {e}")
            return False
    
    async def send_application_status(self, chat_id: str, job_title: str, company: str, status: str) -> bool:
        """Send job application status update."""
        status_emoji = {
            "sent": "‚úÖ",
            "error": "‚ùå",
            "hr_contacted": "üìß"
        }
        
        emoji = status_emoji.get(status, "‚ÑπÔ∏è")
        message = f"{emoji} **{job_title}** –≤ {company}\n"
        
        if status == "sent":
            message += "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        elif status == "error":
            message += "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏."
        elif status == "hr_contacted":
            message += "HR-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ."
        
        return await self.send_simple_notification(chat_id, message)
    
    async def _start_command(self, update, context):
        """Handle /start command."""
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Job Assistant!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.

–ö–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ.
        """
        
        await update.message.reply_text(welcome_message)
    
    async def _help_command(self, update, context):
        """Handle /help command."""
        help_message = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Job Assistant**

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
3. –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –±–æ—Ç –∏—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
4. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
5. –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –±–æ—Ç –ø–æ–¥–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** support@jobassistant.com
        """
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def _status_command(self, update, context):
        """Handle /status command."""
        # This would typically fetch user status from database
        status_message = """
üìä **–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã:**

üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏: –í–∫–ª—é—á–µ–Ω—ã
üìÑ –†–µ–∑—é–º–µ: –ó–∞–≥—Ä—É–∂–µ–Ω–æ
üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫: –°–µ–≥–æ–¥–Ω—è –≤ 09:00
üìù –ó–∞—è–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 5
üìß HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–æ: 3

–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫: –ó–∞–≤—Ç—Ä–∞ –≤ 09:00
        """
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
    
    async def _handle_job_selection(self, update, context):
        """Handle job selection callbacks."""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("apply_"):
            # Extract user_id and job_id from callback data
            parts = data.split("_")
            user_id = parts[1]
            job_id = parts[2]
            
            # Here you would trigger the job application process
            await query.edit_message_text(
                text=f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."
            )
            
            # TODO: Trigger actual application process
            
        elif data.startswith("skip_all_"):
            await query.edit_message_text(
                text="‚ùå –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞!"
            )
    
    def start_bot(self):
        """Start the Telegram bot."""
        if self.application:
            self.application.run_polling()