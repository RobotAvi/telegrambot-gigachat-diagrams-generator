import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile

from config import BOT_TOKEN
from gigachat_client import gigachat_client
from diagram_generator import diagram_generator


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_api_key = State()
    waiting_diagram_request = State()
    selecting_model = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_api_keys = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_models = {}


def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á", callback_data="set_api_key")],
        [InlineKeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="select_model")],
        [InlineKeyboardButton(text="üìä –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É", callback_data="create_diagram")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    current_model = user_models.get(user_id, "GigaChat-Pro")
    
    welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Diagram Generator Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –ì–∏–≥–∞—á–∞—Ç.

**–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**
üìä –°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python –∫–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ diagrams
üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
ü§ñ –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: **{current_model}**
{'üîë API –∫–ª—é—á: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if user_id in user_api_keys else 'üîë API –∫–ª—é—á: ‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –ì–∏–≥–∞—á–∞—Ç–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å GigaChat
3. –û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "set_api_key")
async def set_api_key_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞"""
    await callback.message.edit_text(
        "üîë **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞ –ì–∏–≥–∞—á–∞—Ç–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –ì–∏–≥–∞—á–∞—Ç–∞.\n"
        "–ö–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    await state.set_state(UserStates.waiting_api_key)


@dp.callback_query(F.data == "create_diagram")
async def create_diagram_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    user_id = callback.from_user.id
    
    if user_id not in user_api_keys:
        await callback.message.edit_text(
            "‚ùå **API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –ì–∏–≥–∞—á–∞—Ç–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    await callback.message.edit_text(
        "üìä **–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ –í–µ–±-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
        "‚Ä¢ CI/CD –ø–∞–π–ø–ª–∞–π–Ω\n"
        "‚Ä¢ –°–µ—Ç–µ–≤–∞—è —Ç–æ–ø–æ–ª–æ–≥–∏—è\n"
        "‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    await state.set_state(UserStates.waiting_diagram_request)


@dp.callback_query(F.data == "select_model")
async def select_model_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    user_id = callback.from_user.id
    
    if user_id not in user_api_keys:
        await callback.message.edit_text(
            "‚ùå **API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
            "–î–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –ì–∏–≥–∞—á–∞—Ç–∞.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    await callback.message.edit_text(
        "üîÑ **–ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏...**",
        parse_mode="Markdown"
    )
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        gigachat_client.set_credentials(user_api_keys[user_id])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        models = await gigachat_client.get_available_models()
        
        # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
        current_model = user_models.get(user_id, "GigaChat-Pro")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
        keyboard_buttons = []
        for model in models:
            model_id = model["id"]
            description = model["description"]
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            text = f"{'‚úÖ ' if model_id == current_model else ''}ü§ñ {description}"
            keyboard_buttons.append([
                InlineKeyboardButton(text=text, callback_data=f"model_{model_id}")
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"ü§ñ **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GigaChat**\n\n"
            f"**–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )


@dp.callback_query(F.data.startswith("model_"))
async def model_selected_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    user_id = callback.from_user.id
    model_id = callback.data.replace("model_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    user_models[user_id] = model_id
    gigachat_client.set_model(model_id)
    
    await callback.message.edit_text(
        f"‚úÖ **–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞!**\n\n"
        f"**–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å:** {model_id}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞** - –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª—é—á –æ—Ç –ì–∏–≥–∞—á–∞—Ç–∞
2. **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏** - –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å GigaChat
3. **–û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã** - –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
4. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è** - –ì–∏–≥–∞—á–∞—Ç —Å–æ–∑–¥–∞–µ—Ç Python –∫–æ–¥ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
5. **–†–µ–∑—É–ª—å—Ç–∞—Ç** - –±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
‚Ä¢ **GigaChat** - –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä–∞—è)
‚Ä¢ **GigaChat-Pro** - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ **GigaChat-Max** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (—Å–∞–º–∞—è —É–º–Ω–∞—è)

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º, –±—ç–∫–µ–Ω–¥–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å API Gateway"
‚Ä¢ "–ù–∞—Ä–∏—Å—É–π —Å—Ö–µ–º—É CI/CD –ø—Ä–æ—Ü–µ—Å—Å–∞"

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–∏–∞–≥—Ä–∞–º–º:**
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
‚Ä¢ –°–µ—Ç–µ–≤—ã–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏  
‚Ä¢ –î–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚Ä¢ –°—Ö–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É diagrams –¥–ª—è Python, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (AWS, Azure, GCP) –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )


@dp.message(StateFilter(UserStates.waiting_api_key))
async def process_api_key(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞"""
    api_key = message.text.strip()
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å API –∫–ª—é—á–æ–º –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    status_message = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
    
    try:
        gigachat_client.set_credentials(api_key)
        is_valid = await gigachat_client.check_credentials()
        
        if is_valid:
            user_api_keys[user_id] = api_key
            await status_message.edit_text(
                "‚úÖ **API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await status_message.edit_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á**\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞: {e}")
        await status_message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
    
    await state.clear()


@dp.message(StateFilter(UserStates.waiting_diagram_request))
async def process_diagram_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    user_id = message.from_user.id
    request_text = message.text.strip()
    
    if user_id not in user_api_keys:
        await message.answer(
            "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    gigachat_client.set_credentials(user_api_keys[user_id])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
    selected_model = user_models.get(user_id, "GigaChat-Pro")
    gigachat_client.set_model(selected_model)
    
    status_message = await message.answer(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –ø–æ–º–æ—â—å—é {selected_model}...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã
        diagram_code = await gigachat_client.generate_diagram_code(request_text)
        
        await status_message.edit_text("üî® –°–æ–∑–¥–∞—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        diagram_path = await diagram_generator.generate_diagram(diagram_code, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if diagram_path and os.path.exists(diagram_path):
            await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
            
            diagram_file = FSInputFile(diagram_path)
            await message.answer_photo(
                diagram_file,
                caption=f"üìä **–î–∏–∞–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞!**\n\n**–ó–∞–ø—Ä–æ—Å:** {request_text}",
                parse_mode="Markdown"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(diagram_path)
            except:
                pass
                
            await status_message.delete()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –¥–∏–∞–≥—Ä–∞–º–º—É
            await message.answer(
                "‚ú® **–î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –¥–∏–∞–≥—Ä–∞–º–º—É?",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await status_message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        await status_message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
    
    await state.clear()


@dp.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )


@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:",
        reply_markup=get_main_keyboard()
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())