import asyncio
import logging
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile

from config import BOT_TOKEN, PROXYAPI_KEY
from gigachat_client import gigachat_client, GigaChatClient
from diagram_generator import diagram_generator, generate_diagram_with_retries
from base_llm_client import BaseLLMClient
from proxyapi_client import ProxyApiClient


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

USER_DATA_FILE = "user_data.json"

def load_user_data():
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data.get("api_keys", {}), data.get("models", {})
    except Exception:
        return {}, {}

def save_user_data():
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"api_keys": user_api_keys, "models": user_models}, f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_api_keys, user_models = load_user_data()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_api_key = State()
    waiting_diagram_request = State()
    selecting_model = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_models = {}

# –°–ª–æ–≤–∞—Ä—å –∫–ª–∏–µ–Ω—Ç–æ–≤ LLM
llm_clients = {
    "gigachat": GigaChatClient(),
    "proxyapi": ProxyApiClient(api_key=PROXYAPI_KEY),
    # "openai": OpenAIClient(),  # –ø—Ä–∏–º–µ—Ä –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_llm_provider = {}  # user_id: "gigachat" / "openai" / ...


def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM", callback_data="select_llm_provider")],
        [InlineKeyboardButton(text="üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á", callback_data="set_api_key")],
        [InlineKeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="select_model")],
        [InlineKeyboardButton(text="üìä –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É", callback_data="create_diagram")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard


def format_error_details(error_details: dict, show_sensitive=False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not error_details:
        return "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    result = []
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    result.append(f"üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞**\n")
    result.append(f"**–û–ø–µ—Ä–∞—Ü–∏—è:** {error_details.get('operation', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    result.append(f"**URL:** `{error_details.get('url', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`")
    result.append(f"**–ú–µ—Ç–æ–¥:** {error_details.get('method', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    if 'headers' in error_details:
        result.append(f"\n**–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:**")
        for key, value in error_details['headers'].items():
            result.append(f"‚Ä¢ `{key}: {value}`")
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    if 'data' in error_details:
        result.append(f"\n**–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:**")
        for key, value in error_details['data'].items():
            result.append(f"‚Ä¢ `{key}: {value}`")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç–≤–µ—Ç–µ
    if 'response_status' in error_details:
        result.append(f"\n**–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:**")
        result.append(f"**–°—Ç–∞—Ç—É—Å:** {error_details['response_status']}")
        
        if 'response_headers' in error_details:
            result.append(f"**–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:**")
            for key, value in list(error_details['response_headers'].items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                result.append(f"‚Ä¢ `{key}: {value}`")
        
        if 'response_text' in error_details:
            response_text = error_details['response_text']
            if len(response_text) > 500:
                response_text = response_text[:500] + "..."
            result.append(f"**–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:**\n```\n{response_text}\n```")
    
    # Curl –∫–æ–º–∞–Ω–¥–∞
    if 'curl_command' in error_details:
        result.append(f"\n**–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è curl –∫–æ–º–∞–Ω–¥–∞:**\n```bash\n{error_details['curl_command']}\n```")
    
    # –û—à–∏–±–∫–∞
    if 'error' in error_details:
        result.append(f"\n‚ùå **–û—à–∏–±–∫–∞:** {error_details['error']}")
    
    # –£—Å–ø–µ—Ö
    if error_details.get('success'):
        result.append(f"\n‚úÖ **–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ**")
        if 'token_expires_in' in error_details:
            result.append(f"‚Ä¢ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç: {error_details['token_expires_in']} —Å–µ–∫—É–Ω–¥")
    
    return "\n".join(result)


def get_provider_name(code):
    if code == "gigachat":
        return "GigaChat"
    elif code == "proxyapi":
        return "ProxyAPI (OpenAI)"
    else:
        return code


def get_default_model(provider):
    if provider == "gigachat":
        return "GigaChat-Pro"
    elif provider == "proxyapi":
        return "gpt-3.5-turbo"
    else:
        return "default"


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    provider = user_llm_provider.get(user_id, "gigachat")
    provider_name = get_provider_name(provider)
    welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Diagram Generator Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ {provider_name}.

**–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**
üìä –°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python –∫–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ diagrams
üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à API –∫–ª—é—á {provider_name}
2. –û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "set_api_key")
async def set_api_key_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞"""
    user_id = callback.from_user.id
    provider = user_llm_provider.get(user_id, "gigachat")
    if provider == "proxyapi":
        provider_name = "ProxyAPI"
    else:
        provider_name = "–ì–∏–≥–∞—á–∞—Ç–∞"
    await callback.message.edit_text(
        f"üîë **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞ {provider_name}**\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á {provider_name}.\n"
        "–ö–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    await state.set_state(UserStates.waiting_api_key)


@dp.callback_query(F.data == "create_diagram")
async def create_diagram_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    user_id = callback.from_user.id
    
    if user_id not in user_api_keys:
        await callback.message.edit_text(
            "‚ùå **API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –ì–∏–≥–∞—á–∞—Ç–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    await callback.message.edit_text(
        "üìä **–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ –í–µ–±-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
        "‚Ä¢ CI/CD –ø–∞–π–ø–ª–∞–π–Ω\n"
        "‚Ä¢ –°–µ—Ç–µ–≤–∞—è —Ç–æ–ø–æ–ª–æ–≥–∏—è\n"
        "‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    await state.set_state(UserStates.waiting_diagram_request)


@dp.callback_query(F.data == "select_model")
async def select_model_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    user_id = callback.from_user.id
    provider = user_llm_provider.get(user_id, "gigachat")
    if user_id not in user_api_keys:
        await callback.message.edit_text(
            "‚ùå **API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
            f"–î–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ({provider}).\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        return
    llm_client = llm_clients[provider]
    llm_client.set_credentials(user_api_keys[user_id])
    status_message = await callback.message.edit_text("üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    try:
        models = await llm_client.get_available_models()
        current_model = llm_client.get_current_model()
        if models:
            model_buttons = []
            for model in models:
                model_id = model["id"]
                model_desc = model["description"]
                button_text = f"‚úÖ {model_desc}" if model_id == current_model else model_desc
                model_buttons.append([InlineKeyboardButton(
                    text=button_text, 
                    callback_data=f"model_{model_id}"
                )])
            model_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=model_buttons)
            await status_message.edit_text(
                f"ü§ñ **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏**\n\n"
                f"**–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** {provider}\n"
                f"**–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await status_message.edit_text(
                f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: GigaChat-Pro",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        error_details = llm_client.get_last_error_details()
        error_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}**\n\n"
        error_text += f"**–û—à–∏–±–∫–∞:** {str(e)}\n\n"
        if error_details and not error_details.get('success', False):
            error_text += "**üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:**\n"
            error_text += format_error_details(error_details)
        if len(error_text) > 4000:
            await status_message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}**\n\n"
                f"**–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...",
                parse_mode="Markdown"
            )
            if error_details and not error_details.get('success', False):
                await callback.message.answer(
                    "**üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:**\n" + format_error_details(error_details),
                    parse_mode="Markdown"
                )
            await callback.message.answer(
                f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: GigaChat-Pro",
                reply_markup=get_main_keyboard()
            )
        else:
            await status_message.edit_text(
                error_text + "\n\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: GigaChat-Pro",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )


@dp.callback_query(F.data.startswith("model_"))
async def model_selected_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model_id = callback.data.replace("model_", "")
    user_id = callback.from_user.id
    
    if user_id in user_api_keys:
        llm_client = llm_clients[user_llm_provider.get(user_id, "gigachat")]
        llm_client.set_credentials(user_api_keys[user_id])
        llm_client.set_model(model_id)
        user_models[user_id] = model_id
        save_user_data()
        
        await callback.message.edit_text(
            f"‚úÖ **–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞!**\n\n"
            f"**–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å:** {model_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å –¥–∏–∞–≥—Ä–∞–º–º—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )


@dp.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    help_text = f"""
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:**
‚Ä¢ GigaChat
‚Ä¢ ProxyAPI (OpenAI)

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞** ‚Äî –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª—é—á –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
2. **–û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã** ‚Äî –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
3. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è** ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–µ—Ç Python-–∫–æ–¥ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
4. **–†–µ–∑—É–ª—å—Ç–∞—Ç** ‚Äî –±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º, –±—ç–∫–µ–Ω–¥–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å API Gateway"
‚Ä¢ "–ù–∞—Ä–∏—Å—É–π —Å—Ö–µ–º—É CI/CD –ø—Ä–æ—Ü–µ—Å—Å–∞"

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–∏–∞–≥—Ä–∞–º–º:**
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
‚Ä¢ –°–µ—Ç–µ–≤—ã–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
‚Ä¢ –î–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚Ä¢ –°—Ö–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É diagrams –¥–ª—è Python, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±–ª–∞—á–Ω—ã—Ö –∏ on-prem –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
"""
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )


@dp.message(StateFilter(UserStates.waiting_api_key))
async def process_api_key(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞"""
    api_key = message.text.strip()
    user_id = message.from_user.id
    provider = user_llm_provider.get(user_id, "gigachat")
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å API –∫–ª—é—á–æ–º –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if provider == "proxyapi":
        provider_name = "ProxyAPI"
    else:
        provider_name = "–ì–∏–≥–∞—á–∞—Ç–∞"
    status_message = await message.answer(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á {provider_name}...")
    try:
        llm_client = llm_clients[provider]
        llm_client.set_credentials(api_key)
        is_valid, error_message = await llm_client.check_credentials()
        if is_valid:
            user_api_keys[user_id] = api_key
            save_user_data()
            await status_message.edit_text(
                f"‚úÖ **API –∫–ª—é—á {provider_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
        else:
            error_details = llm_client.get_last_error_details()
            error_text = f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á {provider_name}**\n\n"
            if error_message:
                error_text += f"**–û—à–∏–±–∫–∞:** {error_message}\n\n"
            if error_details:
                error_text += format_error_details(error_details)
                error_text += "\n\n**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                error_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
                error_text += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω\n"
                error_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API\n"
                error_text += "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤ Postman"
            else:
                error_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            if len(error_text) > 4000:
                await status_message.edit_text(
                    f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á {provider_name}**\n\n"
                    f"**–û—à–∏–±–∫–∞:** {error_message}\n\n"
                    "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...",
                    parse_mode="Markdown"
                )
                await message.answer(
                    format_error_details(error_details),
                    parse_mode="Markdown"
                )
                await message.answer(
                    "**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API\n"
                    "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤ Postman",
                    reply_markup=get_main_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                await status_message.edit_text(
                    error_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode="Markdown"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞: {e}")
        error_details = llm_client.get_last_error_details()
        error_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ {provider_name}**\n\n"
        error_text += f"**–û—à–∏–±–∫–∞:** {str(e)}\n\n"
        if error_details:
            error_text += format_error_details(error_details)
        if len(error_text) > 4000:
            await status_message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ {provider_name}**\n\n"
                f"**–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...",
                parse_mode="Markdown"
            )
            if error_details:
                await message.answer(
                    format_error_details(error_details),
                    parse_mode="Markdown"
                )
            await message.answer(
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_keyboard()
            )
        else:
            await status_message.edit_text(
                error_text,
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
    await state.clear()


@dp.message(StateFilter(UserStates.waiting_diagram_request))
async def process_diagram_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    user_id = message.from_user.id
    request_text = message.text.strip()
    
    if user_id not in user_api_keys:
        await message.answer(
            "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    llm_client = llm_clients[user_llm_provider.get(user_id, "gigachat")]
    llm_client.set_credentials(user_api_keys[user_id])
    
    status_message = await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã
        diagram_code = await llm_client.generate_diagram_code(request_text)
        await status_message.edit_text("üî® –°–æ–∑–¥–∞—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        result = await generate_diagram_with_retries(diagram_code, user_id, llm_client, max_attempts=3)
        if isinstance(result, str):
            diagram_path = result
        else:
            diagram_path, last_code, last_error = result if isinstance(result, tuple) and len(result) == 3 else (None, None, None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if diagram_path and os.path.exists(diagram_path):
            await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
            diagram_file = FSInputFile(diagram_path)
            await message.answer_photo(
                diagram_file,
                caption=f"üìä **–î–∏–∞–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞!**\n\n**–ó–∞–ø—Ä–æ—Å:** {request_text}",
                parse_mode="Markdown"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                f"**–ò—Å—Ö–æ–¥–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã:**\n```python\n{diagram_code}\n```",
                parse_mode="Markdown"
            )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–Ω –≤ temp)
            try:
                if os.path.dirname(diagram_path) == os.path.abspath(DIAGRAMS_DIR):
                    pass  # –Ω–µ —É–¥–∞–ª—è–µ–º –∏–∑ diagrams
                else:
                    os.remove(diagram_path)
            except:
                pass
            await status_message.delete()
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –¥–∏–∞–≥—Ä–∞–º–º—É
            await message.answer(
                "‚ú® **–î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –¥–∏–∞–≥—Ä–∞–º–º—É?",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
        elif last_code and last_error:
            # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π —Å–∫—Ä–∏–ø—Ç –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ç–æ–≥–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            code_block = f'<pre language="python">{last_code}</pre>'
            error_block = f'<b>–û—à–∏–±–∫–∞:</b> {last_error}'
            await status_message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏.</b>\n\n"
                "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞:</b>\n" + code_block + "\n\n" + error_block,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        else:
            await status_message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        error_details = llm_client.get_last_error_details()
        
        error_text = f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
        error_text += f"**–û—à–∏–±–∫–∞:** {str(e)}\n\n"
        
        if error_details:
            if not error_details.get('success', False):
                error_text += "**üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:**\n"
                error_text += format_error_details(error_details)
        
        error_text += "\n**üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
        error_text += "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞\n"
        error_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        error_text += "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(error_text) > 4000:
            await status_message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
                f"**–û—à–∏–±–∫–∞:** {str(e)}\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...",
                parse_mode="Markdown"
            )
            
            if error_details and not error_details.get('success', False):
                await message.answer(
                    "**üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:**\n" + format_error_details(error_details),
                    parse_mode="Markdown"
                )
            
            await message.answer(
                "**üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await status_message.edit_text(
                error_text,
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
    
    await state.clear()


@dp.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )


@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:",
        reply_markup=get_main_keyboard()
    )


@dp.callback_query(F.data == "select_llm_provider")
async def select_llm_provider_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    current_provider = user_llm_provider.get(user_id, "gigachat")
    buttons = [
        [InlineKeyboardButton(text=("‚úÖ " if current_provider=="gigachat" else "")+"GigaChat", callback_data="llmprov_gigachat")],
        [InlineKeyboardButton(text=("‚úÖ " if current_provider=="proxyapi" else "")+"ProxyAPI (OpenAI)", callback_data="llmprov_proxyapi")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        f"üåê <b>–í—ã–±–æ—Ä LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞</b>\n\n–¢–µ–∫—É—â–∏–π: <b>{current_provider}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–∏–∞–≥—Ä–∞–º–º:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@dp.callback_query(F.data.startswith("llmprov_"))
async def llm_provider_selected_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    provider = callback.data.replace("llmprov_", "")
    user_llm_provider[user_id] = provider
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM –≤—ã–±—Ä–∞–Ω: <b>{provider}</b>\n\n–¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())